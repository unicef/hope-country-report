{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Country Report Reporting component of the HOPE ecosystem. This components allows user to produce reports and keep them updated customizing filters and refreshing schedule. Repository Repo: https://github.com/unicef/hope-country-report Features Custom Queries Custom Templates Multiple formatting outputs: pdf doc xls txt csv","title":"Home"},{"location":"#country-report","text":"Reporting component of the HOPE ecosystem. This components allows user to produce reports and keep them updated customizing filters and refreshing schedule.","title":"Country Report"},{"location":"#repository","text":"Repo: https://github.com/unicef/hope-country-report","title":"Repository"},{"location":"#features","text":"Custom Queries Custom Templates Multiple formatting outputs: pdf doc xls txt csv","title":"Features"},{"location":"components/","text":"Components Document Parametrizer Processor Query Report Template","title":"Components"},{"location":"components/#components","text":"","title":"Components"},{"location":"components/#document","text":"","title":"Document"},{"location":"components/#parametrizer","text":"","title":"Parametrizer"},{"location":"components/#processor","text":"","title":"Processor"},{"location":"components/#query","text":"","title":"Query"},{"location":"components/#report","text":"","title":"Report"},{"location":"components/#template","text":"","title":"Template"},{"location":"glossary/","text":"Country Report Hope Country Report (HCR) is a pivotal component within the Hope platform, specifically designed to empower UNICEF country offices with the ability to generate customized reports tailored to their unique requirements. These reports are not mere static compilations of data, but rather dynamic representations of information extracted from the Hope Database. At the core of this data retrieval process lies the utilization of Python and Django code. These programming languages provide the necessary tools to extract and manipulate data from the database, enabling the creation of reports that are both informative and visually appealing. To gain a comprehensive understanding of the available data within the Hope Database, it is essential to refer to the GitHub repository at this Features Repository https://github.com/unicef/hope-country-report Glossary Dataset : Dictionary used to create reports System flagged are special arguments with related sync Power Query It's a read only query to be executed on database, it generate a dataset. target: is the model from which the query starts from parametrizer active daily refreshed code: result variable contains the result extra variable contains extra context Formatter template to display or export reports content type code Dataset Dataset has reference to query used Report Report connecting Query, Dataset, and Formatter Document Report is an instance obtained enumerating a Report for each Argument combination. access is granted based on: Business Area as per User Group -> PowerQuery Viewer limited_access to field","title":"Glossary"},{"location":"glossary/#country-report","text":"Hope Country Report (HCR) is a pivotal component within the Hope platform, specifically designed to empower UNICEF country offices with the ability to generate customized reports tailored to their unique requirements. These reports are not mere static compilations of data, but rather dynamic representations of information extracted from the Hope Database. At the core of this data retrieval process lies the utilization of Python and Django code. These programming languages provide the necessary tools to extract and manipulate data from the database, enabling the creation of reports that are both informative and visually appealing. To gain a comprehensive understanding of the available data within the Hope Database, it is essential to refer to the GitHub repository at this","title":"Country Report"},{"location":"glossary/#features","text":"","title":"Features"},{"location":"glossary/#repository","text":"https://github.com/unicef/hope-country-report","title":"Repository"},{"location":"glossary/#glossary","text":"Dataset : Dictionary used to create reports System flagged are special arguments with related sync Power Query It's a read only query to be executed on database, it generate a dataset. target: is the model from which the query starts from parametrizer active daily refreshed code: result variable contains the result extra variable contains extra context Formatter template to display or export reports content type code Dataset Dataset has reference to query used Report Report connecting Query, Dataset, and Formatter Document Report is an instance obtained enumerating a Report for each Argument combination. access is granted based on: Business Area as per User Group -> PowerQuery Viewer limited_access to field","title":"Glossary"},{"location":"setup/","text":"Setup","title":"Setup"},{"location":"setup/#setup","text":"","title":"Setup"},{"location":"tmp/","text":"HCR Components python manage.py inspect_hope Login in develop: Anypassword login user -> admin -> Home [future] Overview of country dashboard Settings (Report Configuration) Query Target model Active Parametrized Refresh Date Restrict Access to * + owner Compress Protect Tags Formatters * Reports (Dataset) Inside you can see all document generated in different formats Query Parametrized (for each report, parameter, format) Preferences: Report Preferences for country office Settings: UI settings for the user Technical Components Parametrizer/Arguments 12 Query 1 Report Configuration 1 Dataset 12 Formatters 4 Report Document 48 Parametrizer Source or value from query Formatter Template file Processor Code (use processor Render Code) To Word Type List Detail Query Target model Parametrized Active: refreshable Visible list in the list Explain: tune the power query Time Index Dataset result of query It\u2019s a file Report Configuration Owner Query Formatters * Limit access to * Scheduling Notify to * Tags Compress Protect Report Documents File Report Dataset Content type Formatter Info Report Template File usable as formatters Improvements Show Active tenants only Technical Tenant = Country Office = Business Area Django Flags to enable Menu items Queue > Celery Execute > Synchronous New work item","title":"HCR Components"},{"location":"tmp/#hcr-components","text":"python manage.py inspect_hope Login in develop: Anypassword login user -> admin ->","title":"HCR Components"},{"location":"tmp/#home","text":"[future] Overview of country dashboard","title":"Home"},{"location":"tmp/#settings-report-configuration","text":"Query Target model Active Parametrized Refresh Date Restrict Access to * + owner Compress Protect Tags Formatters *","title":"Settings (Report Configuration)"},{"location":"tmp/#reports-dataset","text":"Inside you can see all document generated in different formats Query Parametrized (for each report, parameter, format)","title":"Reports (Dataset)"},{"location":"tmp/#preferences","text":"Report Preferences for country office","title":"Preferences:"},{"location":"tmp/#settings-ui-settings-for-the-user","text":"","title":"Settings: UI settings for the user"},{"location":"tmp/#technical-components","text":"Parametrizer/Arguments 12 Query 1 Report Configuration 1 Dataset 12 Formatters 4 Report Document 48","title":"Technical Components"},{"location":"tmp/#parametrizer","text":"Source or value from query","title":"Parametrizer"},{"location":"tmp/#formatter","text":"Template file Processor Code (use processor Render Code) To Word Type List Detail","title":"Formatter"},{"location":"tmp/#query","text":"Target model Parametrized Active: refreshable Visible list in the list Explain: tune the power query Time Index","title":"Query"},{"location":"tmp/#dataset","text":"result of query It\u2019s a file","title":"Dataset"},{"location":"tmp/#report-configuration","text":"Owner Query Formatters * Limit access to * Scheduling Notify to * Tags Compress Protect","title":"Report Configuration"},{"location":"tmp/#report-documents","text":"File Report Dataset Content type Formatter Info","title":"Report Documents"},{"location":"tmp/#report-template","text":"File usable as formatters","title":"Report Template"},{"location":"tmp/#improvements","text":"Show Active tenants only","title":"Improvements"},{"location":"tmp/#technical","text":"Tenant = Country Office = Business Area Django Flags to enable Menu items Queue > Celery Execute > Synchronous New work item","title":"Technical"},{"location":"setup/config/","text":"","title":"Config"},{"location":"setup/docker/","text":"","title":"Docker"},{"location":"setup/virtualenv/","text":"","title":"Virtualenv"},{"location":"tutorials/","text":"Tutorial HOPE users can create reports by retrieving data from the HOPE database. At the core of this data retrieval process lies the utilization of Python and Django code. These programming languages provide the necessary tools to extract and manipulate data from the database, enabling the creation of reports that are both informative and visually appealing. To gain a comprehensive understanding of the available data within the Hope Database, it is essential to refer to the GitHub repository at this link .","title":"Tutorial"},{"location":"tutorials/#tutorial","text":"HOPE users can create reports by retrieving data from the HOPE database. At the core of this data retrieval process lies the utilization of Python and Django code. These programming languages provide the necessary tools to extract and manipulate data from the database, enabling the creation of reports that are both informative and visually appealing. To gain a comprehensive understanding of the available data within the Hope Database, it is essential to refer to the GitHub repository at this link .","title":"Tutorial"},{"location":"tutorials/banks/","text":"Creating a Template Report for a Bank in Belarus 1. Navigate to https://reporting-hope-dev.unitst.org/admin/ 2. Scroll down to \"Queries\" 3. Click on \"ADD QUERY\" 4. Add \"Belarus\" to country office field 5. Fill in the name of the query \"Template for a bank\" 6. Paste this code in order to get the required information. from django.db.models import ExpressionWrapper, F, DecimalField households=list(conn.select_related( \"head_of_household\", \"business_area\", \"parent\", \"household\" ).filter( business_area__slug=\"belarus\", parent__unicef_id=\"PP-0630-24-00000017\" ).values( \"entitlement_quantity\", \"head_of_household__given_name\", \"head_of_household__given_name\", \"head_of_household__family_name\", \"head_of_household__middle_name\", \"head_of_household__sex\", \"household__address\", \"head_of_household__phone_no\", \"household__unicef_id\" ).annotate( commission=ExpressionWrapper((F('entitlement_quantity')*5/100)*1.20, output_field=DecimalField(decimal_places=2) )) ) result = [] for household in households: address_no_spaces = household[\"household__address\"].replace(\" \", \"\") household[\"locality\"] = address_no_spaces[:29] household[\"street_name\"] = address_no_spaces[30:59] result.append(household) 7. We will produce a report based on the Payments made recently in Belarus. So, we chose the Payment , table as target of our report. 8. Save and continue editing. 9. Click \"Queue\" button to generate the data. 10. Click \"DATASETS\" to preview the results and ensure things are correct 11. We now need to create a formater as requested by the bank. This will allow us to produce a text file that ressemble the one we required by our bank. Navigate to Home>Power Query and slick \" Add \" on the formater row 12. Give the template a name \"Template for a bank in Belarus\" 13. Click here. 14. In the code area, paste the following html code: <table></table> 15. Select the \"text/html\" option for the hile type since we want a simple html file. Save. 16. Go back to the Menu > Power Query and add a Report Configuration 17. Don't forget to chose the country office the report belongs to. Chose the report title and the appropriate query. 18. Click \"Template for a bank in Belarus\" as formatter and move it to the Chosen formatters. 19. Click \"Choose\" 20. Save. 21. And \"Queue\" in order to generate the requested template 22. Click \"VIEW ON SITE\" if you want to look at the result. 23. Click \"view\" 24. Click \"Template Report For Bank\"","title":"Creating a Template Report for a Bank in Belarus"},{"location":"tutorials/banks/#creating-a-template-report-for-a-bank-in-belarus","text":"1. Navigate to https://reporting-hope-dev.unitst.org/admin/ 2. Scroll down to \"Queries\" 3. Click on \"ADD QUERY\" 4. Add \"Belarus\" to country office field 5. Fill in the name of the query \"Template for a bank\" 6. Paste this code in order to get the required information. from django.db.models import ExpressionWrapper, F, DecimalField households=list(conn.select_related( \"head_of_household\", \"business_area\", \"parent\", \"household\" ).filter( business_area__slug=\"belarus\", parent__unicef_id=\"PP-0630-24-00000017\" ).values( \"entitlement_quantity\", \"head_of_household__given_name\", \"head_of_household__given_name\", \"head_of_household__family_name\", \"head_of_household__middle_name\", \"head_of_household__sex\", \"household__address\", \"head_of_household__phone_no\", \"household__unicef_id\" ).annotate( commission=ExpressionWrapper((F('entitlement_quantity')*5/100)*1.20, output_field=DecimalField(decimal_places=2) )) ) result = [] for household in households: address_no_spaces = household[\"household__address\"].replace(\" \", \"\") household[\"locality\"] = address_no_spaces[:29] household[\"street_name\"] = address_no_spaces[30:59] result.append(household) 7. We will produce a report based on the Payments made recently in Belarus. So, we chose the Payment , table as target of our report. 8. Save and continue editing. 9. Click \"Queue\" button to generate the data. 10. Click \"DATASETS\" to preview the results and ensure things are correct 11. We now need to create a formater as requested by the bank. This will allow us to produce a text file that ressemble the one we required by our bank. Navigate to Home>Power Query and slick \" Add \" on the formater row 12. Give the template a name \"Template for a bank in Belarus\" 13. Click here. 14. In the code area, paste the following html code: <table></table> 15. Select the \"text/html\" option for the hile type since we want a simple html file. Save. 16. Go back to the Menu > Power Query and add a Report Configuration 17. Don't forget to chose the country office the report belongs to. Chose the report title and the appropriate query. 18. Click \"Template for a bank in Belarus\" as formatter and move it to the Chosen formatters. 19. Click \"Choose\" 20. Save. 21. And \"Queue\" in order to generate the requested template 22. Click \"VIEW ON SITE\" if you want to look at the result. 23. Click \"view\" 24. Click \"Template Report For Bank\"","title":"Creating a Template Report for a Bank in Belarus"},{"location":"tutorials/hh/","text":"Generate a report on information related to a list of households 1. Navigate to https://reporting-hope-dev.unitst.org/admin/ 2. Click \"Add\" 3. Type \"Information in a list of Households\" in the name field 4. Click the target field and select \"Household\" 5. Switch to tab \"Add query | HOPE Reporting site admin\" 6. hh_list= [ \"HH-23-0271.6128\", \"HH-23-0271.6129\", \".......\", \"HH-24-2546.2547\" ] result=list(conn.filter(unicef_id__in=hh_list).values(\"unicef_id\", \"program__name\", \"registration_data_import__name\")) we paste the list in the hh_list variable and filter the query for Households in that list. 7. Click this button. 8. Click \"Queue\" 9. Click \"DATASETS\" 10. Click \"[ABSTRACT] Information in a list of Households\" 11. Click \"PREVIEW\", you can view the data","title":"Generate a report on information related to a list of households"},{"location":"tutorials/hh/#generate-a-report-on-information-related-to-a-list-of-households","text":"1. Navigate to https://reporting-hope-dev.unitst.org/admin/ 2. Click \"Add\" 3. Type \"Information in a list of Households\" in the name field 4. Click the target field and select \"Household\" 5. Switch to tab \"Add query | HOPE Reporting site admin\" 6. hh_list= [ \"HH-23-0271.6128\", \"HH-23-0271.6129\", \".......\", \"HH-24-2546.2547\" ] result=list(conn.filter(unicef_id__in=hh_list).values(\"unicef_id\", \"program__name\", \"registration_data_import__name\")) we paste the list in the hh_list variable and filter the query for Households in that list. 7. Click this button. 8. Click \"Queue\" 9. Click \"DATASETS\" 10. Click \"[ABSTRACT] Information in a list of Households\" 11. Click \"PREVIEW\", you can view the data","title":"Generate a report on information related to a list of households"},{"location":"tutorials/payment_r/","text":"Generate Payment Plans Report from a template 1. Navigate to https://reporting-hope-dev.unitst.org/admin/ 2. Add a query 3. In the Parent field, you have to chose the report template that you want to use. It has to be using the Parameters so that you can substitute new ones. The target and code fields must be empty but the country and Parent fields must be all set. 4. Delete anything in the code field result=conn.all() 5. Click this dropdown for the parametrizer. 6. You can chose any parameter or create one by clicking on the \"+\" sign. 7. Chose a name and a country. 8. Fill the value field with the correct json information: {\"payment_plan\": [\"PP-4140-24-00000056\", \"PP-4140-24-00000055\", \"PP-4140-24-00000049\", \"PP-4140-24-00000046\"], \"business_area\": [\"syria\"]} 9. Save the parameters 10. Click this button. 11. Click \"Info on Payment plans (Payment plan list report)\" 12. Click \"Queue\" 13. Go back and we create the report configurations 14. Select the country 15. Click \"Info on Payment plans (Payment plan list report)\" as the query 16. Chose the report to be available as Excel and html file 17. you can chose to limit access to or notify \" dzzzdzzzz@unicef.org \" 18. Click the \"Compress\" field if you want the report to be available as a compressed file. 19. Save and continue editing, and queue the report. 20. Click \"VIEW ON SITE\" to view the result 21. Click \"view\" 22. Click \"Report For Payment Plans In Syriapp-4140-24-00000056_Syria\"","title":"Generate Payment Plans Report from a template"},{"location":"tutorials/payment_r/#generate-payment-plans-report-from-a-template","text":"1. Navigate to https://reporting-hope-dev.unitst.org/admin/ 2. Add a query 3. In the Parent field, you have to chose the report template that you want to use. It has to be using the Parameters so that you can substitute new ones. The target and code fields must be empty but the country and Parent fields must be all set. 4. Delete anything in the code field result=conn.all() 5. Click this dropdown for the parametrizer. 6. You can chose any parameter or create one by clicking on the \"+\" sign. 7. Chose a name and a country. 8. Fill the value field with the correct json information: {\"payment_plan\": [\"PP-4140-24-00000056\", \"PP-4140-24-00000055\", \"PP-4140-24-00000049\", \"PP-4140-24-00000046\"], \"business_area\": [\"syria\"]} 9. Save the parameters 10. Click this button. 11. Click \"Info on Payment plans (Payment plan list report)\" 12. Click \"Queue\" 13. Go back and we create the report configurations 14. Select the country 15. Click \"Info on Payment plans (Payment plan list report)\" as the query 16. Chose the report to be available as Excel and html file 17. you can chose to limit access to or notify \" dzzzdzzzz@unicef.org \" 18. Click the \"Compress\" field if you want the report to be available as a compressed file. 19. Save and continue editing, and queue the report. 20. Click \"VIEW ON SITE\" to view the result 21. Click \"view\" 22. Click \"Report For Payment Plans In Syriapp-4140-24-00000056_Syria\"","title":"Generate Payment Plans Report from a template"},{"location":"tutorials/simple/","text":"Creating reports 1. Navigate to https://reporting-hope-dev.unitst.org/admin/ 2. Scroll down and click \"Queries\" 3. Click \"ADD QUERY\" 4. Click here. 5. Right-click \"Afghanistan\" 6. Click the \"Name:\" field. 7. Type the name of the query e.g \"Afghan query for all households\" 8. Click the \" Target \" drop-down menu. It designate which table you are going to be using to query the database. For our case we will use the Household table. Alert: The list of tables available in the Hope project can be viewed on this link . The link between different tables and how to retrieve information from one table to another is part of the Django documentation . 9. Start typing the code for the query. Remember, here conn represent conn=Household.objects . Please refer to Django . 10. result = list(conn.filter(withdrawn=False, first_registration_date__year__gte=2024).values(\"unicef_id\", \"admin1__name\")) Here we will query the list of households which are not withdrawn and were registered in 2024 or above. We will only retrieve their unicef_id and Admin1 area name. The query must return data that we must assign to the result environment variable. 11. We then save and continue editing 12. Click \"Queue\" to launch the retrieval of the data. 13. If you want to preview the result, click \"DATASETS\" button. 14. Click on the query \"[ABSTRACT] Afghan query for all households\" 15. And preview \"PREVIEW\". You should see that your report is OK. 16. Click on the navigation link \"Power Query\" so that we can produce the actual report in its format. 17. Click \"Add\" on the Report Configuration 18. Click this drop-down and chose which country office the report will bellong to. 19. Fill in the \"Report Title:\" field. \"Repport on Afghan households in 2024\" 20. Click here. 21. Search for the query you previously created by typing \"afgh\". 22. Click \"[ABSTRACT] Afghan query for all households\" 23. Add \"Queryset To HTML\" if you want to see the report as an html page and file. 24. Add \"Dataset to XLSX\" if you want to see the report as an Excel file. 25. Click \"Choose\" and move them on the other side. 26. Save and continue editing. 27. Click \"Queue\" to generate the actual reports. 28. Click \"VIEW ON SITE\" in order to view the resulting reports. 29. Click \"view\"","title":"Creating reports"},{"location":"tutorials/simple/#creating-reports","text":"1. Navigate to https://reporting-hope-dev.unitst.org/admin/ 2. Scroll down and click \"Queries\" 3. Click \"ADD QUERY\" 4. Click here. 5. Right-click \"Afghanistan\" 6. Click the \"Name:\" field. 7. Type the name of the query e.g \"Afghan query for all households\" 8. Click the \" Target \" drop-down menu. It designate which table you are going to be using to query the database. For our case we will use the Household table. Alert: The list of tables available in the Hope project can be viewed on this link . The link between different tables and how to retrieve information from one table to another is part of the Django documentation . 9. Start typing the code for the query. Remember, here conn represent conn=Household.objects . Please refer to Django . 10. result = list(conn.filter(withdrawn=False, first_registration_date__year__gte=2024).values(\"unicef_id\", \"admin1__name\")) Here we will query the list of households which are not withdrawn and were registered in 2024 or above. We will only retrieve their unicef_id and Admin1 area name. The query must return data that we must assign to the result environment variable. 11. We then save and continue editing 12. Click \"Queue\" to launch the retrieval of the data. 13. If you want to preview the result, click \"DATASETS\" button. 14. Click on the query \"[ABSTRACT] Afghan query for all households\" 15. And preview \"PREVIEW\". You should see that your report is OK. 16. Click on the navigation link \"Power Query\" so that we can produce the actual report in its format. 17. Click \"Add\" on the Report Configuration 18. Click this drop-down and chose which country office the report will bellong to. 19. Fill in the \"Report Title:\" field. \"Repport on Afghan households in 2024\" 20. Click here. 21. Search for the query you previously created by typing \"afgh\". 22. Click \"[ABSTRACT] Afghan query for all households\" 23. Add \"Queryset To HTML\" if you want to see the report as an html page and file. 24. Add \"Dataset to XLSX\" if you want to see the report as an Excel file. 25. Click \"Choose\" and move them on the other side. 26. Save and continue editing. 27. Click \"Queue\" to generate the actual reports. 28. Click \"VIEW ON SITE\" in order to view the resulting reports. 29. Click \"view\"","title":"Creating reports"}]}
