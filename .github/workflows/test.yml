name: Test

on:
  push:
    branches:
      - develop
      - master
      - staging
      - release/*
      - feature/*
      - bugfix/*
      - hotfix/*
#  pull_request:
#    branches: [ develop, master ]
#    types: [ synchronize, opened, reopened, ready_for_review ]

concurrency:
  group: "${{ github.workflow }}-${{ github.ref }}"
  cancel-in-progress: true

defaults:
  run:
    shell: bash

permissions:
  id-token: write
  attestations: write


jobs:
#  changes:
#    if: (github.event_name != 'pull_request'
#            || github.event.pull_request.head.repo.full_name != github.event.pull_request.base.repo.full_name)
#            || github.event_name == 'create'
#    runs-on: ubuntu-latest
#    timeout-minutes: 1
#    defaults:
#      run:
#        shell: bash
#    outputs:
#      run_tests: ${{ steps.changes.outputs.run_tests }}
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4
#      - id: changes
#        name: Check for file changes
#        uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36 # v3.0.2
#        with:
#          base: ${{ github.ref }}
#          token: ${{ github.token }}
#          filters: .github/file-filters.yml
  test:
#    needs: [ changes ]
#    if: needs.changes.outputs.run_tests == 'true'
    runs-on: ubuntu-latest
    outputs:
      image: ${{ env.IMAGE }}
      commit: ${{env.sha_short}}
      build_date: ${{env.BUILD_DATE}}
      branch: ${{env.BRANCH}}
      version: ${{ steps.calc.outputs.version }}
    services:
      redis:
        image: redis:7.4.0
        ports:
          - 6379:6379
      db:
        image: postgis/postgis:14-3.5
        env:
          POSTGRES_DATABASE: country_report
          POSTGRES_PASSWORD: postgres
          POSTGRES_USERNAME: postgres
        ports:
          - 15432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      hopedb:
        image: postgis/postgis:14-3.5
        env:
          POSTGRES_DATABASE: hopedb
          POSTGRES_PASSWORD: postgres
          POSTGRES_USERNAME: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      DOCKER_DEFAULT_PLATFORM: linux/amd64
      DOCKER_METADATA_ANNOTATIONS_LEVELS: manifest,index
      DATABASE_URL: postgis://postgres:postgres@localhost:15432/country_report
      DATABASE_HOPE_URL: postgis://postgres:postgres@localhost:5432/hopedb
      CELERY_BROKER_URL: redis://localhost:6379/1
      CACHE_URL: redis://localhost:6379/2
      DOCKER_BUILDKIT: 1
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Hack container for local development
        if: ${{ env.ACT }}
        run: |
          echo /home/runner/externals/node20/bin >> $GITHUB_PATH
      - name: Hack container for local development
        run: |
          echo BRANCH="${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_ENV
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5.7.0
        with:
          images: "unicef/hope-country-report"
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{raw}}
      - name: DockerHub login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - id: last_commit
        uses: ./.github/actions/last_commit
      - id: calc
        shell: bash
        run: |
          set -x
          pip install "hatch[vcs]"
          VERSION=$(hatch version)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          IMAGE=$(echo '${{env.DOCKER_METADATA_OUTPUT_JSON}}' | jq '.tags[0]')
          echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "BUILD_DATE=$(date +"%Y-%m-%d %H:%M" )" >> $GITHUB_ENV
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV

      - name: Install the latest version of uv
        uses: astral-sh/setup-uv@v1
        with:
          python-version: '3.13'

      - name: Restore cached vEnv
        id: cache-venv-restore
        uses: actions/cache/restore@v4
        with:
          path: .venv
          key: ${{ runner.os }}-venv-${{ hashFiles('**/uv.lock') }}

      - name: Install dependencies
        run: uv sync --frozen --group dev

      - name: Save vEnv
        id: cache-venv-save
        uses: actions/cache/save@v4
        with:
          path: .venv
          key: ${{ steps.cache-venv-restore.outputs.cache-primary-key || format('{0}-venv-{1}', runner.os, hashFiles('**/uv.lock')) }}
        if: steps.cache-venv-restore.outputs.cache-hit != 'true'

      - name: Run Test suite
        run: |
          uv run tox -e d52-py313

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        continue-on-error: true
        with:
          env_vars: OS,PYTHON
          fail_ci_if_error: true
          files: /app/output/coverage.xml
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: false
          name: codecov-${{env.GITHUB_REF_NAME}}

  release:
    needs: [ test ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: DockerHub login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build Distro
        run: |
            docker build \
                --target dist \
                --cache-from "type=gha" \
                --cache-to "type=gha,mode=max" \
                --build-arg "VERSION=${{needs.test.outputs.version}}" \
                --build-arg "BUILD_DATE=${{needs.test.outputs.build_date}}" \
                --build-arg "BRANCH=${{needs.test.outputs.branch}}" \
                -t ${{needs.test.outputs.image}} \
                -f docker/Dockerfile .
            docker push ${{needs.test.outputs.image}}
            docker inspect ${{needs.test.outputs.image}} | jq -r '.[0].Config.Labels'
            echo "::notice::âœ… Image ${{needs.test.outputs.image}} built and pushed"
