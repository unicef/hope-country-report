name: SDLC - Version create

on:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]+*' # Allows semver format and any suffix (i.e. 'rc1')

jobs:
  prepare-version:
    name: "Prepare version number"
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Extract tag
        id: version
        run: |
          TAG_NAME="${GITHUB_REF#refs/tags/}"
          echo "Extracted tag: $TAG_NAME"
          echo "version=$TAG_NAME" >> $GITHUB_OUTPUT

  build-push:
    name: "Build & push image"
    runs-on: ubuntu-latest
    needs: [prepare-version]
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Install the latest version of uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "pyproject.toml"
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set target input
        id: config
        run: |
          version=$(uvx --with hatch-vcs hatchling metadata version)
          COMMIT_SHA=$(git rev-parse --short "$GITHUB_SHA")

          git_reference="${{ github.event.inputs.git_reference }}"
          tag="${{ github.event.inputs.tag }}"
          if [ -z "$tag" ]; then
            tag="$git_reference"
          fi
          BUILD_DATE=$(date +"%Y-%m-%d %H:%M")

          echo "git_reference=$git_reference" >> $GITHUB_OUTPUT
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "tag=$tag" >> $GITHUB_OUTPUT
          echo "build_date=$BUILD_DATE" >> $GITHUB_OUTPUT
          echo "commit_sha=$COMMIT_SHA" >> $GITHUB_OUTPUT

      - name: Build and push versioned image
        run: |
          IMAGE_TAG="${{ needs.prepare-version.outputs.version }}"
          docker buildx create --use
          docker buildx build \
            --build-arg VERSION="${{ steps.config.outputs.version }}" \
            --build-arg BUILD_DATE="${{ steps.config.outputs.build_date }}" \
            --build-arg SOURCE_COMMIT=${{ steps.config.outputs.commit_sha }} \
            --cache-from ${{ vars.DOCKERHUB_ORGANIZATION }}/${{ vars.DOCKERHUB_REPOSITORY }}:cache-develop \
            --cache-from ${{ vars.DOCKERHUB_ORGANIZATION }}/${{ vars.DOCKERHUB_REPOSITORY }}:cache-$IMAGE_TAG \
            --cache-to ${{ vars.DOCKERHUB_ORGANIZATION }}/${{ vars.DOCKERHUB_REPOSITORY }}:cache-$IMAGE_TAG \
            -t ${{ vars.DOCKERHUB_ORGANIZATION }}/${{ vars.DOCKERHUB_REPOSITORY }}:$IMAGE_TAG \
            -f ./docker/Dockerfile \
            --push \
            ./

  trivy:
    name: Check Release with Trivy
    runs-on: ubuntu-latest
    needs: [prepare-version, build-push]
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.33.0
        with:
          image-ref: ${{ vars.DOCKERHUB_ORGANIZATION }}/${{ vars.DOCKERHUB_REPOSITORY }}:${{ needs.prepare-version.outputs.version }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
