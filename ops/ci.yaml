trigger:
  batch: true
  branches:
    include:
    - develop
pr:
  - develop
resources:
  - repo: self

variables:
  Docker.backend.repository: "hope-country-report"
  Docker.registryConnection: "ICTD-HOPE-DEV-ACR"
  Docker.url: "uniappsakshopedev.azurecr.io"
  tag: $(Build.SourceVersion)
  additionalTag: $(Build.SourceBranchName)
  pipelineId: 1149

stages:
  - stage: build_and_push_backend_dev
    dependsOn: []
    displayName: BUILD and PUSH DEV
    jobs:
      - job: build_push_backend
        pool:
          vmImage: ubuntu-latest
        displayName: "[BACKEND_BUILD]"
        steps:
          - task: Docker@2
            inputs:
              containerRegistry: '$(Docker.registryConnection)'
              command: 'login'
          - script: |
              docker buildx create --use
              docker buildx build \
              --cache-from=$(Docker.url)/$(Docker.backend.repository)-cache:dev-$(additionalTag) \
              --cache-from=$(Docker.url)/$(Docker.backend.repository)-cache:dev-latest \
              --cache-to=$(Docker.url)/$(Docker.backend.repository)-cache:dev-$(additionalTag) \
              --cache-to=$(Docker.url)/$(Docker.backend.repository)-cache:dev-latest \
              -t $(Docker.url)/$(Docker.backend.repository):dev-$(tag) \
              --target dev \
              --push \
              ./
            displayName: Docker build dev

  - stage: test_dev
    displayName: TEST
    dependsOn: build_and_push_backend_dev
    jobs:
      - job: tests
        pool:
          vmImage: ubuntu-latest
        displayName: "[DJANGO TEST]"
        steps:
          - task: Docker@2
            displayName: "[ACR] Login"
            inputs:
              command: login
              containerRegistry: $(Docker.registryConnection)
          - task: DockerCompose@0
            displayName: "Run tests"
            inputs:
              containerregistrytype: 'Azure Container Registry'
              azureContainerRegistry: $(Docker.registryConnection)
              dockerComposeFile: 'ops/compose.test.yml'
              action: 'Run a Docker Compose command'
              dockerComposeCommand: 'up --exit-code-from backend'
              dockerComposeFileArgs: |
                backend_image=$(Docker.url)/$(Docker.backend.repository):dev-$(tag)

  - stage: build_prd
    displayName: BUILD AND PUSH PRD
    dependsOn: test_dev
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    jobs:
      - job: build_push_backend
        pool:
          vmImage: ubuntu-latest
        displayName: "[BACKEND_BUILD]"
        steps:
          - task: Docker@2
            inputs:
              containerRegistry: '$(Docker.registryConnection)'
              command: 'login'
          - script: |
              docker buildx create --use
              docker buildx build \
              --cache-from=$(Docker.url)/$(Docker.backend.repository)-cache:prd-$(additionalTag) \
              --cache-from=$(Docker.url)/$(Docker.backend.repository)-cache:prd-latest \
              --cache-to=$(Docker.url)/$(Docker.backend.repository)-cache:prd-$(additionalTag) \
              --cache-to=$(Docker.url)/$(Docker.backend.repository)-cache:prd-latest \
              -t $(Docker.url)/$(Docker.backend.repository):prd-$(tag) \
              --target prd \
              --push \
              ./
            displayName: Docker build prd

  - stage: trigger_deploy
    displayName: Trigger deploy
    dependsOn: [build_prd]
    jobs:
      - job: trigger_deploy
        pool:
          vmImage: ubuntu-latest
        displayName: "[TRIGGER_DEPLOY]"
        steps:
          - script: |
              pipelineId=$(pipelineId)
              IFS=',' read -ra pipelines <<< "$pipelineId"
              for pipeline in "${pipelines[@]}"; do
                jsonBody='{"variables": {"tag": {"isSecret": false, "value": "$(tag)"}}}'
                contentLength=$(echo -n $jsonBody | wc -c)
                project=ICTD-HCT-MIS
                organization=unicef

                echo Triggering deploy for pipeline $pipeline
                echo JSON body: $jsonBody

                curl -v -L \
                  -u ":$(AZURE_PAT)" \
                  -H "Content-Type: application/json" \
                  -H "Content-Length: $contentLength" \
                  -d "$jsonBody" \
                  https://dev.azure.com/$organization/$project/_apis/pipelines/$pipeline/runs?api-version=7.1-preview.1
                if [ $? -ne 0 ]; then
                  echo "Failed to trigger deploy for pipeline $pipeline"
                  exit 1
                fi
              done
            displayName: "Trigger deploy"
            condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))